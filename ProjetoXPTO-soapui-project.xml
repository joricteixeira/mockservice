<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="41b434b6-4611-44a5-9a5f-41f7bae52449" activeEnvironment="Default" name="ProjetoXPTO" resourceRoot="" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="30bb826c-ae8d-4f85-aa12-86cbb3841194" port="8080" path="/" host="FFPTN1631" name="MockServiceAPI"><con:settings/><con:properties/><con:restMockAction name="/values" method="GET" resourcePath="/values" id="821069f8-1d4c-44e8-a877-a09001b763a0"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="response200" id="08fa036e-8073-4367-8b7b-07848010b02e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"values": [1,2,3]
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="ed703a00-9687-4281-898b-17505eeb39af" port="8080" path="/" host="FFPTN1631" name="AF"><con:settings/><con:properties/><con:restMockAction name="/score" method="POST" resourcePath="/score" id="44079301-e4ac-451f-99f9-7ad50e2022f1"><con:settings/><con:defaultResponse>90-response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def slurper = new groovy.json.JsonSlurper()

def requestContent = mockRequest.getRequestContent()
log.info "Request body: " + requestContent

def requestBody = slurper.parseText(requestContent)

if(requestBody.CustomerId == "123456789")
{
	return "90-response"
}





/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="10-response" id="a08993ed-b9af-4c8d-9a46-5d4892cf015d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"FraudScore": 10
}</con:responseContent></con:response><con:response name="90-response" id="b08f8220-1347-4467-a86b-b2eb966085b1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"FraudScore": 90
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>
